// Generated by CoffeeScript 1.6.2
(function() {
  _.groupByMulti = function(obj, values, context) {
    var byFirst, prop, rest;

    if (!values.length) {
      return obj;
    }
    byFirst = _.groupBy(obj, values[0], context);
    rest = values.slice(1);
    for (prop in byFirst) {
      byFirst[prop] = _.groupByMulti(byFirst[prop], rest, context);
    }
    return byFirst;
  };

  jQuery(function() {
    var CV;

    CV = (function() {
      function CV(key) {
        this.key = key;
      }

      CV.prototype.fetch = function() {
        var _this = this;

        return $.ajax({
          url: "https://spreadsheets.google.com/pub?key=" + this.key + "&hl=en&output=csv",
          method: "get"
        }).done(function(response) {
          var objects;

          objects = $.csv.toObjects(response);
          _this.rows = $.map(objects, function(object) {
            return new CV.Row(object);
          });
          return _this.categories = _.chain(_this.rows).groupBy("type").map(function(category) {
            return new CV.Group(category, "category");
          }).value();
        }).error(function(response) {
          return console.log("Error");
        }).complete(function() {
          return console.log("Complete");
        });
      };

      return CV;

    })();
    CV.Row = (function() {
      function Row(object) {
        var k, v;

        for (k in object) {
          v = object[k];
          this[k.toLowerCase()] = v.trim();
        }
      }

      return Row;

    })();
    CV.Group = (function() {
      function Group(rows, attribute) {
        this.name = rows[0][attribute];
        this.rows = rows;
      }

      return Group;

    })();
    $.CV = function(el, options) {
      var state,
        _this = this;

      state = "";
      this.setState = function(_state) {
        return state = _state;
      };
      this.getState = function() {
        return state;
      };
      this.settings = {};
      this.$el = $(el);
      this.init = function() {
        var cv;

        _this.settings = $.extend({}, _this.defaults, options);
        _this.setState("ready");
        cv = new CV(_this.settings["key"]);
        return $.when(cv.fetch()).then(function() {
          var renders;

          renders = _.map(cv.categories, function(category) {
            return _this.settings["templates"].category({
              category: category
            });
          });
          return _this.$el.html(renders);
        });
      };
      this.init();
      return this;
    };
    $.CV.prototype.defaults = {
      key: "0AsxYR5Y3N6DjdHJWZDNNcjhmZ0ZSb2hFTjU0MDBjZ2c",
      templates: {
        category: _.template("<div class=\"category\">\n  <h3><%= category.name %></h3>\n\n  <% _.each(category.rows, function(row) { %>\n    <%= $.CV.prototype.defaults.templates.row({ row: row }) %>\n  <% }); %>\n</div>"),
        row: _.template("<div class=\"row\">\n  <% if (row.url) { %>\n    <a href=\"<%= row.url %>\" target=\"_blank\"><%= row.title %></a>,\n  <% } else { %>\n    <u><%= row.title %></u>,\n  <% } %>\n\n  <%= row.venue %>\n\n  <% if (row.city && row.country) { %>\n    (<%= row.city %>, <%= row.country %>)\n  <% } %>\n\n  <% if (row.notes) { %>\n    - <%= row.notes %>\n  <% } %>\n</div>")
      }
    };
    return $.fn.CV = function(options) {
      return this.each(function() {
        var plugin;

        if ($(this).data("CV") === void 0) {
          plugin = new $.CV(this, options);
          return $(this).data("CV", plugin);
        }
      });
    };
  });

}).call(this);
